#!/usr/bin/env bash

# Defaults
user="$(id -u):$(id -g)"
image=""
workdir="/workspace"
declare -a env_vars
declare -a port_maps

usage() {
    cat <<EOF
Usage: here -i <image> [-r] [-u <UID:GID>] [-w <workdir>] [-e <VAR=VAL>] [-p <host:container>] [command...]
Options:
  -i <image>      Docker image to use (required)
  -r              Run as root (equivalent to -u 0:0)
  -u <UID:GID>    Run as specific user (default: current user IDs)
  -w <workdir>    Set working directory inside container (default: /workspace)
  -e <VAR=VAL>    Set environment variable inside container
  -p <h:c>        Publish port mapping (host:container), repeatable
  -h, --help      Show this help message
Examples:
  here -i alpine echo Hello
  here -i ubuntu -r bash
  here -i node:alpine -u 1000:1000 -w /code node index.js
  here -i alpine                    # Opens interactive shell
  here -i node:alpine -p 3000:3000 node server.js
  here -i redis -p 6379:6379 -p 16379:16379
EOF
}

# parse flags
while [[ $# -gt 0 ]]; do
    case "$1" in
    -i)
        image="$2"
        shift 2
        ;;
    -r)
        user="0:0"
        shift
        ;;
    -u)
        user="$2"
        shift 2
        ;;
    -w)
        workdir="$2"
        shift 2
        ;;
    -e)
        env_vars+=("--env" "$2")
        shift 2
        ;;
    -p)
        port_maps+=("-p" "$2")
        shift 2
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *) break ;;
    esac
done

if [ -z "$image" ]; then
    usage
    exit 1
fi

if ! docker image inspect "$image" >/dev/null 2>&1; then
    echo "Image '$image' not found locally. Pulling..."
    docker pull "$image"
fi

run_flags=(--rm --interactive --tty -w "$workdir" -v "$PWD:$workdir" -u "$user")
run_flags+=("${env_vars[@]}")
run_flags+=("${port_maps[@]}")

if docker run --rm "$image" sh -c "command -v bash" >/dev/null 2>&1; then
    shell="bash"
else
    shell="sh"
fi

if [ $# -gt 0 ]; then
    echo "+ docker run ${run_flags[*]} --entrypoint \"$shell\" \"$image\" -c \"$*\""
    docker run "${run_flags[@]}" --entrypoint "$shell" "$image" -c "$*"
else
    echo "+ docker run ${run_flags[*]} --entrypoint \"$shell\" \"$image\""
    docker run "${run_flags[@]}" --entrypoint "$shell" "$image"
fi
